var documenterSearchIndex = {"docs":
[{"location":"tutorials/#Tutorial","page":"Tutorials","title":"Tutorial","text":"","category":"section"},{"location":"tutorials/#Computing-the-[cubage](@ref)","page":"Tutorials","title":"Computing the cubage","text":"","category":"section"},{"location":"tutorials/#Cubing-a-Simple-Tree","page":"Tutorials","title":"Cubing a Simple Tree","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Cubage for a single tree, with diameters measured in centimeters and heights in meters. The diameter at breast height (DBH) and total height (Ht) must be provided as part of the input values. The CubingMethods can be: Smalian, Newton and Huber.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using ForestMensuration\n\nd = [9.0, 7.0, 5.8, 5.1, 3.8, 1.9, 0.0]\n\nh =  [0.3, 1.3, 3.3, 5.3, 7.3, 9.3, 10.8]\n\ncubage(Smalian, h, d)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"With the bark thickness value, it is possible to calculate the bark factor and total and commercial volumes without bark. Note: the provided thickness should be the 'single thickness' in millimeters, i.e., the actual value collected from the field. The function will convert it into 'double thickness'.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"\nbark = [0.9, 0.5, 0.3, 0.2, 0.2, 0.1, 0.0]\n\ncubage(Newton, h, d, bark)","category":"page"},{"location":"tutorials/#Cubing-Multiple-Trees","page":"Tutorials","title":"Cubing Multiple Trees","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We utilize the function cubage to calculate cubage for multiple trees. The function expects data in a dataframe format where each row represents a tree, and columns contain attributes such as height and diameter. The cubage function can be applied to each tree group using the specified height and diameter columns.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using ForestMensuration # hide\nusing DataFrames \n\ndata = DataFrame(\n    tree = [148, 148, 148, 148, 148, 148, 148, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222],\n    h = [0.3, 1.3, 3.3, 5.3, 7.3, 9.3, 10.8, 0.3, 1.3, 3.3, 5.3, 7.3, 9.3, 11.3, 13.3, 15.3, 17.3, 19.5],\n    d = [9.0, 7.0, 5.8, 5.1, 3.8, 1.9, 0.0, 16.0, 12.0, 11.6, 10.1, 9.4, 8.2, 7.0, 6.0, 4.0, 2.0, 0.0],\n    bark = [0.9, 0.5, 0.3, 0.2, 0.2, 0.1, 0.0, 1.2, 0.5, 0.3, 0.3, 0.2, 0.2, 0.3, 0.0, 0.0, 0.0, 0.0]\n)\n\ncubage(Huber, :tree, :h, :d, data)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Additionally, bark thickness values can be provided to calculate bark factors and volumes without bark.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"cubage(Huber, :tree, :h, :d, :bark, data)","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [ForestMensuration]","category":"page"},{"location":"reference/#ForestMensuration.ForestMensuration","page":"Reference","title":"ForestMensuration.ForestMensuration","text":"Description:\n\nForestMensuration.jl is a Julia package that provides a comprehensive set of functions for performing dendrometric and forest inventory calculations. The package emphasizes ease of use, making it straightforward to:\n\nConduct regressions: Linear models can be fitted with ease.\nCalculate tree and stand volume: Various methods are supported, including Huber, Smalian, and Newton.\nPerform forest inventories: Implementations of simple random sampling are available.\nCreate frequency tables: Analyze the distribution of dendrometric variables.\n\nFacilitates the analysis of dendrometric and forest data. Performs complex calculations with simple commands. Offers a user-friendly and intuitive interface.\n\n\n\n\n\n","category":"module"},{"location":"reference/#ForestMensuration.MixTerm","page":"Reference","title":"ForestMensuration.MixTerm","text":"Union type representing a mixed term, which can be a single AbstractTerm or a tuple of AbstractTerms.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.β0","page":"Reference","title":"ForestMensuration.β0","text":"Represents an intercept term for linear models.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#ForestMensuration.CubingMethod","page":"Reference","title":"ForestMensuration.CubingMethod","text":"Abstract type representing a method for cubing (calculating volume).\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.FittedLinearModel","page":"Reference","title":"ForestMensuration.FittedLinearModel","text":"Represents a fitted linear model.\n\nFields\n\nformula::F: The formula used for the model.\ndata::D: The data frame containing the data.\nβ::Array{T, 1}: The regression coefficients.\nσ²::T: The variance of residuals.\nRMSE::T: The root mean squared error.\nchol::C: The Cholesky decomposition of X'X.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.FittedLinearModel-Union{Tuple{C}, Tuple{T}, Tuple{D}, Tuple{F}, Tuple{F, D, Vector{T}, T, T, C}} where {F, D, T, C}","page":"Reference","title":"ForestMensuration.FittedLinearModel","text":"Creates a new FittedLinearModel instance.\n\nArguments\n\nformula::F: The formula used for the model.\ndata::D: The data frame containing the data.\nβ::Array{T, 1}: The regression coefficients.\nσ²::T: The variance of residuals.\nRMSE::T: The root mean squared error.\nchol::C: The Cholesky decomposition of X'X.\n\nReturns\n\nFittedLinearModel{F, D, T, C}: A new fitted linear model.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.Huber","page":"Reference","title":"ForestMensuration.Huber","text":"Huber Method:   The Huber method measures the diameter or circumference at the midpoint of the section, and the volume is determined by:\n\nv = v0 + Σi=1:n(vi) + vt\nvi = gi * li\n\nWhere:\n\nv0 = volume of the stump;\nvi = volume of intermediate sections;\nvt = volume of the cone;\ng = basal area;\nl = length.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.Newton","page":"Reference","title":"ForestMensuration.Newton","text":"Newton Method:   The Newton method involves measuring at 3 positions along each section (at the ends and in the middle of the logs). Therefore, it is a more laborious method than the others, but the estimated volume will be more accurate.\n\nv = v0 + Σi=1:n(vi) + vt\nvi = (gi + gm + gi+1)/2 * li\n\nWhere:\n\nv0 = volume of the stump;\nvi = volume of intermediate sections;\nvt = volume of the cone;\ng = basal area;\ngm = basal area at the midpoint of the section;\nl = length.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.Smalian","page":"Reference","title":"ForestMensuration.Smalian","text":"Smalian Method:   The Smalian method measures diameters or circumferences at the ends of each section and calculates the total volume by:\n\nVt = v0 + Σi=1:n(vi) + vt\nv0 = g0 * l0\nvi = (gi + gi+1)/2 * li\nvt = (1/3) * gn * ln\n\nWhere:\n\nv0 = volume of the stump;\nvi = volume of intermediate sections;\nvt = volume of the cone;\ng = basal area;\nl = length.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.StratifiedReport","page":"Reference","title":"ForestMensuration.StratifiedReport","text":"Represents a report for stratified sampling in forest inventory.\n\nFields\n\nanova::AbstractDataFrame: ANOVA table.\nauxiliary_table::AbstractDataFrame: Auxiliary table with additional statistics.\nresult_table::AbstractDataFrame: Result table with final estimates.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration._amplitude-Tuple{Vector}","page":"Reference","title":"ForestMensuration._amplitude","text":"Calculates the amplitude (range) of a vector of values.\n\nArguments\n\nx::Vector: The vector of values.\n\nReturns\n\nReal: The amplitude (range).\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._calculate_delta-Tuple{FittedLinearModel, DataFrames.AbstractDataFrame, Real}","page":"Reference","title":"ForestMensuration._calculate_delta","text":"Calculate the delta (difference) between the model matrices for age and index age.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted regression model.\ndata_age::AbstractDataFrame: The data frame containing the current age data.\nindex_age::Real: The index age for which the delta is calculated.\n\nReturns\n\nΔ::Vector{Real}: The delta for each observation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._class_breadth-Tuple{Real, Int64}","page":"Reference","title":"ForestMensuration._class_breadth","text":"Calculates the class breadth (width) for a given amplitude and number of classes.\n\nArguments\n\nh::Real: The amplitude.\nk::Int: The number of classes.\n\nReturns\n\nReal: The class breadth (width).\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._class_center-Tuple{Real, Real}","page":"Reference","title":"ForestMensuration._class_center","text":"Calculates the class center for a given value and class width.\n\nArguments\n\nx::Real: The value.\nhi::Real: The class width.\n\nReturns\n\nReal: The class center.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._create_matrix_formulas!-Tuple{Vector{StatsModels.MatrixTerm}, Vector{Union{Tuple{StatsModels.AbstractTerm, Vararg{StatsModels.AbstractTerm}}, StatsModels.AbstractTerm}}, Vararg{StatsModels.AbstractTerm}}","page":"Reference","title":"ForestMensuration._create_matrix_formulas!","text":"Create matrix formulas for linear regression models.\n\nArguments\n\nmatrix_formulas::Vector{MatrixTerm}: Vector to store the resulting matrix formulas.\nx_term_list::Vector{MixTerm}: List of independent variable terms.\nq_term::AbstractTerm...: Additional terms for the model.\neffect::Symbol: Type of effect to consider (:additive or :interactive).\n\nReturns\n\nVoid: Modifies matrix_formulas in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._criteria_parameters-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration._criteria_parameters","text":"Calculate various criteria parameters for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nMatrix{Float64}: The matrix of criteria parameters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._dependent_variable-Tuple{StatsModels.AbstractTerm, StatsModels.AbstractTerm}","page":"Reference","title":"ForestMensuration._dependent_variable","text":"Generates a list of transformed dependent variable terms.\n\nArguments\n\ny_term::AbstractTerm: The dependent variable term.\nx_term::AbstractTerm: The independent variable term.\n\nReturns\n\nVector{AbstractTerm}: A list of transformed dependent variable terms.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._finite_population-Tuple{Real, Real, Int64, Real, Real}","page":"Reference","title":"ForestMensuration._finite_population","text":"Calculates the required sample size for a finite population using an iterative approach with a maximum iteration limit to prevent infinite loops.\n\nArguments\n\ncv::Real: Coefficient of variation.\nni::Real: Initial sample size.\nN::Int: Population size.\ne::Real: Desired error margin.\nα::Real: Confidence level.\nmax_iterations::Int=1000: Maximum number of iterations (default is 1000).\n\nReturns\n\nInt64: The required sample size for a finite population.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._finite_sample-Tuple{Real, Real, Real, Int64}","page":"Reference","title":"ForestMensuration._finite_sample","text":"Calculates the sample size for a finite population.\n\nArguments\n\nt::Real: T-value for the given confidence level.\ncv::Real: Coefficient of variation.\ne::Real: Desired error margin.\nN::Int64: Population size.\n\nReturns\n\nFloat64: The sample size for a finite population.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._fit_regression!-Tuple{Vector{FittedLinearModel}, Vector{StatsModels.AbstractTerm}, Vector{StatsModels.MatrixTerm}, DataFrames.AbstractDataFrame, Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration._fit_regression!","text":"Fit linear regression models to the data.\n\nArguments\n\nfitted_models::Vector{FittedLinearModel}: Vector to store the fitted models.\ny_term_list::Vector{AbstractTerm}: List of dependent variable terms.\nmatrix_formulas::Vector{MatrixTerm}: List of matrix formulas for the models.\ndata::AbstractDataFrame: The data frame containing the data.\ny_observed::Vector{<:Real}: Observed values of the dependent variable.\nx_observed::Vector{<:Real}: Observed values of the independent variable.\n\nReturns\n\nVoid: Modifies fitted_models in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._infinite_population-NTuple{4, Real}","page":"Reference","title":"ForestMensuration._infinite_population","text":"Calculates the required sample size for an infinite population using an iterative approach with a maximum iteration limit to prevent infinite loops.\n\nArguments\n\ncv::Real: Coefficient of variation.\nni::Real: Initial sample size.\ne::Real: Desired error margin.\nα::Real: Confidence level.\nmax_iterations::Int=1000: Maximum number of iterations (default is 1000).\n\nReturns\n\nInt64: The required sample size for an infinite population.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._infinite_sample-Tuple{Real, Real, Real}","page":"Reference","title":"ForestMensuration._infinite_sample","text":"Calculates the sample size for an infinite population.\n\nArguments\n\nt::Real: T-value for the given confidence level.\ncv::Real: Coefficient of variation.\ne::Real: Desired error margin.\n\nReturns\n\nFloat64: The sample size for an infinite population.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._inventory_report-Union{Tuple{F}, Tuple{I}, Tuple{S}, Tuple{T}, Tuple{F, F, F, F, F, Union{I, F, S}, F, String, Union{I, T}, Union{I, T}, Union{I, T}, I, Symbol}} where {T<:Tuple, S<:String, I<:Int64, F<:Float64}","page":"Reference","title":"ForestMensuration._inventory_report","text":"Generate an inventory report.\n\nArguments\n\nx̅::F: Mean volume per plot.\ncv::F: Coefficient of variation.\nTtab::F: T-value for the confidence level.\ns²x̅::F: Mean variance.\nsx̅::F: Standard error.\nplot_area::Union{I, F, S}: Area of the plot.\nf::F: Sampling fraction.\npopulation::String: Population type (\"infinite\" or \"finite\").\nn::Union{I, T}: Number of measured plots.\nrequired_plots::Union{I, T}: Number of required plots.\nmissing_plots::Union{I, T}: Number of missing plots.\nN::I: Total number of plots.\nlg::Symbol: Language for the report (\":pt\" for Portuguese, \":en\" for English).\n\nReturns\n\nDataFrame: The inventory report.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._predict-Tuple{Vector{<:Real}, Vector{<:Real}, Real, Symbol}","page":"Reference","title":"ForestMensuration._predict","text":"Predict values based on different transformation functions.\n\nArguments\n\nŷ::Vector{<:Real}: Predicted values.\nx::Vector{<:Real}: Independent variable values.\nσ²::Real: Variance of residuals.\nfunction_name::Symbol: Name of the transformation function.\n\nReturns\n\nVector{<:Real}: Transformed predicted values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._simple_frequency-Tuple{Vector}","page":"Reference","title":"ForestMensuration._simple_frequency","text":"Calculates the simple frequency of unique values in a vector.\n\nArguments\n\nx::Vector: The vector of values.\n\nReturns\n\nVector: The frequency of each unique value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration._sturges-Tuple{Int64}","page":"Reference","title":"ForestMensuration._sturges","text":"Calculates the number of classes using Sturges' formula.\n\nArguments\n\nn::Int: The number of observations.\n\nReturns\n\nInt: The number of classes.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.adjr2-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.adjr2","text":"Calculate the adjusted R-squared value for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The adjusted R-squared value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.artificial_form_factor-Tuple{Real, Real, Real}","page":"Reference","title":"ForestMensuration.artificial_form_factor","text":"Artificial Form Factor (aff): For the calculation of the artificial form factor, the volume of the reference cylinder will have a diameter equal to the tree's DBH.\n\naff = Rigorous Vol / Cylinder Vol 1.3\n\nWhere:\n\nRigorous Vol = total volume determined by one of the methods: Smalian, Huber, or Newton;\nCylinder Vol 1.3 = volume of a cylinder with height and diameter equal to the total height and DBH of the tree.\n\nArguments\n\nvt::Real: The total volume of the tree.\nht::Real: The total height of the tree.\ndbh::Real: The diameter at breast height of the tree.\n\nReturns\n\nFloat64: The artificial form factor.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.bark_factor-Tuple{Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.bark_factor","text":"Calculates the bark factor, used to estimate the volume without bark.\n\nThe bark factor is used to estimate the volume without bark by considering the ratio of bark thickness to total diameter.\n\nArguments\n\nd::Vector{<:Real}: Vector of diameters.\ne::Vector{<:Real}: Vector of bark thicknesses in millimeters.\n\nReturns\n\nFloat64: The bark factor.\n\nExample\n\nCalculate bark factor\n\nk = bark_factor(d, e)\n\nCalculate total volume without bark\n\ntotalvolumewithoutbark = totalvolume * k^2\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.bole_volume-Tuple{Type{<:ForestMensuration.CubingMethod}, Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.bole_volume","text":"Calculate tree bole volume cubic meters using Smalian, Newton, or Huber methods. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\n\nReturns\n\nFloat64: The volume of the bole in cubic meters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.coef_table-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.coef_table","text":"Create a table of coefficients for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nDataFrame: The coefficient table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.coefnames-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.coefnames","text":"Get names of the coefficients of a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nVector{String}: The names of the coefficients.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.cone_volume-Tuple{Real, Real}","page":"Reference","title":"ForestMensuration.cone_volume","text":"Calculates the volume of a cone, used to estimate the final portion (vn) of the tree, typically considered to have a conical shape.\n\nArguments\n\nh::Real: The height of the cone in meters.\nd::Real: The diameter of the cone in centimeters.\n\nReturns\n\nFloat64: The volume of the cone in cubic meters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.confidence_interval-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.confidence_interval","text":"Calculate the confidence intervals for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nVector{Float64}: The confidence intervals.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.criteria_table-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.criteria_table","text":"Create a criteria table for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nDataFrame: The criteria table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.cubage-Tuple{Type{<:ForestMensuration.CubingMethod}, Symbol, Symbol, Symbol, DataFrames.AbstractDataFrame}","page":"Reference","title":"ForestMensuration.cubage","text":"Calculate tree cubage using grouped data from a DataFrame. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\ntree::Symbol: The symbol representing the tree identifier.\nh::Symbol: The symbol representing the heights in the DataFrame.\nd::Symbol: The symbol representing the diameters in the DataFrame.\ndata::AbstractDataFrame: The DataFrame containing the tree data.\ndbh::Float64: Diameter at breast height (default is 1.3 meters).\n\nReturns\n\nDataFrame: A DataFrame with the calculated volumes and form factors for each tree.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.cubage-Tuple{Type{<:ForestMensuration.CubingMethod}, Symbol, Symbol, Symbol, Symbol, DataFrames.AbstractDataFrame}","page":"Reference","title":"ForestMensuration.cubage","text":"Calculate tree cubage including bark factor using grouped data from a DataFrame. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\ntree::Symbol: The symbol representing the tree identifier.\nh::Symbol: The symbol representing the heights in the DataFrame.\nd::Symbol: The symbol representing the diameters in the DataFrame.\ne::Symbol: The symbol representing the bark thicknesses in the DataFrame.\ndata::AbstractDataFrame: The DataFrame containing the tree data.\ndbh::Float64: Diameter at breast height (default is 1.3 meters).\n\nReturns\n\nDataFrame: A DataFrame with the calculated volumes, form factors, and bark-adjusted volumes for each tree.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.cubage-Tuple{Type{<:ForestMensuration.CubingMethod}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.cubage","text":"Calculate tree cubage including bark factor. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\ne::Vector{<:Real}: Vector of bark thicknesses.\ndbh::Float64: Diameter at breast height (default is 1.3 meters).\n\nReturns\n\nDataFrame: A DataFrame with the calculated volumes, form factors, and bark-adjusted volumes.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.cubage-Tuple{Type{<:ForestMensuration.CubingMethod}, Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.cubage","text":"Calculate tree cubage using Smalian, Newton, or Huber methods. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.  Thus, the volume of the sections and the total volume are determined by summing the volume of the sections.  Determination can be carried out on felled trees or standing trees using equipment such as the Bitterlich relascope.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\ndbh::Float64: Diameter at breast height (default is 1.3 meters).\n\nReturns\n\nDataFrame: A DataFrame with the calculated volumes and form factors.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.cylinder_volume-Tuple{Real, Real}","page":"Reference","title":"ForestMensuration.cylinder_volume","text":"Calculates the volume of a cylinder, used to estimate the volume (v0) of the tree stump remaining after clear-cutting.\n\nArguments\n\nh::Real: The height of the cylinder in meters.\nd::Real: The diameter of the cylinder in centimeters.\n\nReturns\n\nFloat64: The volume of the cylinder in cubic meters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.diametric_table-Tuple{Vector{<:Real}, Real}","page":"Reference","title":"ForestMensuration.diametric_table","text":"Creates a diametric table for a vector of values given a class width and plot area.\n\nArguments\n\nx::Vector{<:Real}: The vector of values.\nhi::Real: The class width.\nplot_area::Real=1.0: The plot area in hectares (default is 1.0).\n\nReturns\n\nDataFrame: A DataFrame containing the diametric table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.diametric_table-Tuple{Vector{<:Real}}","page":"Reference","title":"ForestMensuration.diametric_table","text":"Creates a diametric table for a vector of values.\n\nArguments\n\nx::Vector{<:Real}: The vector of values.\nplot_area::Real=1.0: The plot area in hectares (default is 1.0).\n\nReturns\n\nDataFrame: A DataFrame containing the diametric table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.diametric_table-Union{Tuple{S}, Tuple{S, S, DataFrames.AbstractDataFrame}} where S<:Symbol","page":"Reference","title":"ForestMensuration.diametric_table","text":"Creates a diametric table for grouped data in a DataFrame.\n\nArguments\n\ng::S: The symbol representing the grouping variable.\nx::S: The symbol representing the values variable.\ndata::AbstractDataFrame: The DataFrame containing the data.\nplot_area::Real=1.0: The plot area in hectares (default is 1.0).\n\nReturns\n\nDataFrame: A DataFrame containing the diametric table for each group.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.diametric_table-Union{Tuple{S}, Tuple{S, S, Real, DataFrames.AbstractDataFrame}} where S<:Symbol","page":"Reference","title":"ForestMensuration.diametric_table","text":"Creates a diametric table for grouped data in a DataFrame with a specified class width.\n\nArguments\n\ng::S: The symbol representing the grouping variable.\nx::S: The symbol representing the values variable.\nhi::Real: The class width.\ndata::AbstractDataFrame: The DataFrame containing the data.\nplot_area::Real=1.0: The plot area in hectares (default is 1.0).\n\nReturns\n\nDataFrame: A DataFrame containing the diametric table for each group.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.dispersion-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.dispersion","text":"Calculate the dispersion of a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nMatrix{Float64}: The dispersion matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.frequency_table-Tuple{Vector{<:Real}, Real}","page":"Reference","title":"ForestMensuration.frequency_table","text":"Creates a frequency table for a vector of values given a class width.\n\nArguments\n\nx::Vector{<:Real}: The vector of values.\nhi::Real: The class width.\n\nReturns\n\nDataFrame: A DataFrame containing the frequency table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.frequency_table-Tuple{Vector{<:Real}}","page":"Reference","title":"ForestMensuration.frequency_table","text":"Creates a frequency table for a vector of values.\n\nArguments\n\nx::Vector{<:Real}: The vector of values.\n\nReturns\n\nDataFrame: A DataFrame containing the frequency table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.frequency_table-Union{Tuple{S}, Tuple{S, S, DataFrames.AbstractDataFrame}} where S<:Symbol","page":"Reference","title":"ForestMensuration.frequency_table","text":"Creates a frequency table for grouped data in a DataFrame.\n\nArguments\n\ng::S: The symbol representing the grouping variable.\nx::S: The symbol representing the values variable.\ndata::AbstractDataFrame: The DataFrame containing the data.\n\nReturns\n\nDataFrame: A DataFrame containing the frequency table for each group.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.frequency_table-Union{Tuple{S}, Tuple{S, S, Real, DataFrames.AbstractDataFrame}} where S<:Symbol","page":"Reference","title":"ForestMensuration.frequency_table","text":"Creates a frequency table for grouped data in a DataFrame with a specified class width.\n\nArguments\n\ng::S: The symbol representing the grouping variable.\nx::S: The symbol representing the values variable.\nhi::Real: The class width.\ndata::AbstractDataFrame: The DataFrame containing the data.\n\nReturns\n\nDataFrame: A DataFrame containing the frequency table for each group.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.hdom_classification-Tuple{FittedLinearModel, DataFrames.AbstractDataFrame, Real, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.hdom_classification","text":"Calculate the dominant height given the site classification, fitted model, and index age.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted regression model.\ndata_age::AbstractDataFrame: The data frame containing the current age data.\nindex_age::Real: The index age for the calculation.\nsite::Vector{<:Real}: The site classification values.\n\nReturns\n\nhdom::Vector{Real}: The dominant height for each observation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.homoscedasticity-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.homoscedasticity","text":"Test for homoscedasticity of residuals in a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nWhiteTest: The result of the White test.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.loglikelihood-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.loglikelihood","text":"Calculate the log-likelihood for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The log-likelihood.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.n_coef-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.n_coef","text":"Get the number of coefficients of a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nInt: The number of coefficients.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.natural_form_factor-Tuple{Real, Real, Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.natural_form_factor","text":"Natural Form Factor (nff): For the calculation of the natural form factor, the volume of the reference cylinder will have a diameter equal to the diameter taken at 1/10 of the total height.\n\nf0.1h = Rigorous Vol / Cylinder Vol 0.1\n\nWhere:\n\nRigorous Vol = total volume determined by one of the methods: Smalian, Huber, or Newton;\nCylinder Vol 0.1 = volume of a cylinder with height equal to the total height of the tree and diameter taken at 1/10 of the total height.\n\nInterpolate diameter at a given height using linear interpolation.\n\nArguments\n\nvt::Real: The total volume of the tree.\nht::Real: The total height of the tree.\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\n\nReturns\n\nFloat64: The natural form factor.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.normality-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.normality","text":"Test for normality of residuals in a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nExactOneSampleKSTest: The result of the Kolmogorov-Smirnov test.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.p_result-Tuple{StatsAPI.HypothesisTest}","page":"Reference","title":"ForestMensuration.p_result","text":"Check the result of a hypothesis test.\n\nArguments\n\ntest::HypothesisTests.HypothesisTest: The hypothesis test result.\n\nReturns\n\nBool: True if the p-value is greater than 0.05, otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.predict-Tuple{FittedLinearModel, DataFrames.AbstractDataFrame}","page":"Reference","title":"ForestMensuration.predict","text":"Predict values using a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\ndata::AbstractDataFrame: The data frame containing the new data for prediction.\n\nReturns\n\nVector{Float64}: The predicted values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.predict-Tuple{FittedLinearModel, DataFrames.DataFrameRow}","page":"Reference","title":"ForestMensuration.predict","text":"Predict a single value using a fitted linear model for a single row of data.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\ndata::DataFrameRow: A single row of data for prediction.\n\nReturns\n\nFloat64: The predicted value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.predict-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.predict","text":"Predict values using the data from the fitted model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nVector{Float64}: The predicted values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.quotient_form-Tuple{Real, Real, Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.quotient_form","text":"Form Quotient (qf): The natural decrease in diameter along the trunk defines the so-called form quotient, which is a ratio between diameters. An example of a form quotient is the Schiffel form quotient, given by:\n\nQ = D(1/2H) / DBH\n\nWhere:\n\nQ < 1\nD(1/2H) = diameter measured at half the total height of the tree.\n\nSimilar to the form factor, the volume of a tree, with or without bark, can be obtained by multiplying the volume of a cylinder by the average form quotient, suitable for the species and the desired volume to be estimated.\n\nArguments\n\nht::Real: The total height of the tree.\ndbh::Real: The diameter at breast height of the tree.\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\n\nReturns\n\nFloat64: The form quotient.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.r2-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.r2","text":"Calculate the R-squared value for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The R-squared value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.regression-Union{Tuple{S}, Tuple{S, S, DataFrames.AbstractDataFrame, Vararg{S}}} where S<:Symbol","page":"Reference","title":"ForestMensuration.regression","text":"Perform regression analysis.\n\nArguments\n\ny::S: Symbol representing the dependent variable.\nx::S: Symbol representing the independent variable.\ndata::AbstractDataFrame: Data frame containing the data.\nq::S...: Symbols representing additional terms for the model.\nbest::Union{Bool, Int}: Whether to return the best model(s) based on RMSE.\neffect::S: Type of effect to consider (:additive or :interactive).\nq_type: Type of q variable (CategoricalTermorContinuousTerm`).\n\nReturns\n\nVector{FittedLinearModel}: Vector of fitted models.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.residuals-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.residuals","text":"Calculate residuals of a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nVector{Float64}: The residuals.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.simple_casual_sampling-Tuple{Vector{<:Real}, Real, Real}","page":"Reference","title":"ForestMensuration.simple_casual_sampling","text":"Performs simple random sampling for forest inventory with specified plot area and total area.\n\nArguments\n\nvolume::Vector{<:Real}: Volume measurements.\nplot_area::Real: Area of each plot.\ntotal_area::Real: Total area.\ne::Real=10: Desired error margin (default is 10%).\nα::Real=0.95: Confidence level (default is 95%).\nlg::Symbol=:pt: Language for the report (default is Portuguese).\n\nReturns\n\nDataFrame: Inventory report.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.simple_casual_sampling-Tuple{Vector{<:Real}, Real}","page":"Reference","title":"ForestMensuration.simple_casual_sampling","text":"Performs simple random sampling for forest inventory with total area.\n\nArguments\n\nvolume::Vector{<:Real}: Volume measurements.\ntotal_area::Real: Total area.\ne::Real=10: Desired error margin (default is 10%).\nα::Real=0.95: Confidence level (default is 95%).\nlg::Symbol=:pt: Language for the report (default is Portuguese).\n\nReturns\n\nDataFrame: Inventory report.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.site_classification-Tuple{FittedLinearModel, DataFrames.AbstractDataFrame, Real}","page":"Reference","title":"ForestMensuration.site_classification","text":"Calculate the site classification given the fitted model and index age.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted regression model.\ndata_age::AbstractDataFrame: The data frame containing the current age data.\nindex_age::Real: The index age for site classification.\n\nReturns\n\nsite::Vector{Real}: The site classification for each observation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.site_classification-Tuple{FittedLinearModel, Real}","page":"Reference","title":"ForestMensuration.site_classification","text":"Calculate the site classification given the fitted model and index age.\n\nArguments\n\nfitted_model: The fitted regression model.\nindex_age::Real: The index age for site classification.\n\nReturns\n\nsite_classification::Vector{Real}: The site classification for each observation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.site_table-Tuple{FittedLinearModel, Real, Real}","page":"Reference","title":"ForestMensuration.site_table","text":"Calculate the site table given a fitted model, index age, and height increment.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted regression model.\nindex_age::Real: The index age for site classification.\nhi::Real: The height increment for site classification.\n\nReturns\n\nSiteAnalysis: A struct containing site table and site plot.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.stderror-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.stderror","text":"Calculate the standard error of the coefficients of a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nVector{Float64}: The standard errors.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.syx-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.syx","text":"Calculate the standard error of the estimate for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The standard error of the estimate.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.syx_in_percentage-Tuple{FittedLinearModel}","page":"Reference","title":"ForestMensuration.syx_in_percentage","text":"Calculate the standard error of the estimate as a percentage for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The standard error of the estimate as a percentage.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.aic-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.aic","text":"Calculate the Akaike Information Criterion (AIC) for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The AIC value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.aicc-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.aicc","text":"Calculate the corrected Akaike Information Criterion (AICc) for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The AICc value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.bic-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.bic","text":"Calculate the Bayesian Information Criterion (BIC) for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The BIC value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.coef-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.coef","text":"Get coefficients of a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nVector{Float64}: The coefficients.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.deviance-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.deviance","text":"Calculate the deviance for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The deviance.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.dof-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.dof","text":"Get degrees of freedom of a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nInt: The degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.dof_residual-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.dof_residual","text":"Get degrees of freedom for residuals of a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nInt: The degrees of freedom for residuals.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.modelmatrix-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.modelmatrix","text":"Get the model matrix of a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nMatrix{Float64}: The model matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.nobs-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.nobs","text":"Get the number of observations used in fitting the model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nInt: The number of observations.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.nulldeviance-Tuple{FittedLinearModel}","page":"Reference","title":"StatsAPI.nulldeviance","text":"Calculate the null deviance for a fitted linear model.\n\nArguments\n\nfitted_model::FittedLinearModel: The fitted linear model.\n\nReturns\n\nFloat64: The null deviance.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ForestMensuration","category":"page"},{"location":"#ForestMensuration","page":"Home","title":"ForestMensuration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ForestMensuration.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"\"pkg> add https://github.com/marcosdanieldasilva/ForestMensuration.jl\"","category":"page"}]
}
