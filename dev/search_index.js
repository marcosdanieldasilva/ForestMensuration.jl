var documenterSearchIndex = {"docs":
[{"location":"forestmensuration/#ForestMensuration-Package:","page":"ForestMensuration Package","title":"ForestMensuration Package:","text":"","category":"section"},{"location":"forestmensuration/","page":"ForestMensuration Package","title":"ForestMensuration Package","text":"Documentation for ForestMensuration.","category":"page"},{"location":"forestmensuration/","page":"ForestMensuration Package","title":"ForestMensuration Package","text":"ForestMensuration.jl is a Julia package that provides a comprehensive set of functions for performing dendrometric and forest inventory calculations. The package emphasizes ease of use, making it straightforward to:","category":"page"},{"location":"forestmensuration/","page":"ForestMensuration Package","title":"ForestMensuration Package","text":"Conduct regressions: Linear models can be fitted with ease.\nCalculate tree and stand volume: Various methods are supported, including Huber, Smalian, and Newton.\nPerform forest inventories: Implementations of simple random sampling are available.\nCreate frequency tables: Analyze the distribution of dendrometric variables.","category":"page"},{"location":"forestmensuration/","page":"ForestMensuration Package","title":"ForestMensuration Package","text":"Facilitates the analysis of dendrometric and forest data. Performs complex calculations with simple commands. Offers a user-friendly and intuitive interface.","category":"page"},{"location":"forestmensuration/","page":"ForestMensuration Package","title":"ForestMensuration Package","text":"CurrentModule = ForestMensuration","category":"page"},{"location":"forestmensuration/#Installation","page":"ForestMensuration Package","title":"Installation","text":"","category":"section"},{"location":"forestmensuration/","page":"ForestMensuration Package","title":"ForestMensuration Package","text":"The ForestMensuration package is available through the Julia package system and can be added by running Pkg.add(\"ForestMensuration\") or by directly downloading it from the GitHub page:","category":"page"},{"location":"forestmensuration/","page":"ForestMensuration Package","title":"ForestMensuration Package","text":"pkg> add https://github.com/marcosdanieldasilva/ForestMensuration.jl","category":"page"},{"location":"forestmensuration/","page":"ForestMensuration Package","title":"ForestMensuration Package","text":"For more details, please feel free to connect with me on LinkedIn.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = ForestMensuration","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Documentation for ForestMensuration.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [ForestMensuration]","category":"page"},{"location":"reference/#ForestMensuration.ForestMensuration","page":"Reference","title":"ForestMensuration.ForestMensuration","text":"Description:\n\nForestMensuration.jl is a Julia package that provides a comprehensive set of functions for performing dendrometric and forest inventory calculations. The package emphasizes ease of use, making it straightforward to:\n\nConduct regressions: Linear models can be fitted with ease.\nCalculate tree and stand volume: Various methods are supported, including Huber, Smalian, and Newton.\nPerform forest inventories: Implementations of simple random sampling are available.\nCreate frequency tables: Analyze the distribution of dendrometric variables.\n\nFacilitates the analysis of dendrometric and forest data. Performs complex calculations with simple commands. Offers a user-friendly and intuitive interface.\n\n\n\n\n\n","category":"module"},{"location":"reference/#ForestMensuration.MixTerm","page":"Reference","title":"ForestMensuration.MixTerm","text":"const MixTerm = Union{AbstractTerm,Tuple{AbstractTerm,Vararg{AbstractTerm}}}\n\nUnion type representing a mixed term, which can be a single AbstractTerm or a tuple of AbstractTerms.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.emptySchema","page":"Reference","title":"ForestMensuration.emptySchema","text":"const emptySchema = Schema()\n\nRepresents a default schema used for modeling operations.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#ForestMensuration.β0","page":"Reference","title":"ForestMensuration.β0","text":"const β0 = InterceptTerm{true}()\n\nRepresents an intercept term for linear models.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#ForestMensuration.CubingMethod","page":"Reference","title":"ForestMensuration.CubingMethod","text":"abstract type CubingMethod\n\nAbstract type representing a method for cubing (calculating volume).\n\nSubtypes\n\nSmalian\nHuber\nNewton\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.Huber","page":"Reference","title":"ForestMensuration.Huber","text":"abstract type Huber <: CubingMethod\n\nHuber Method:   The Huber method measures the diameter or circumference at the midpoint of the section, and the volume    is determined by:\n\nv = v0 + Σi=1:n(vi) + vt\nvi = gi * li\n\nWhere:\n\nv0 = volume of the stump;\nvi = volume of intermediate sections;\nvt = volume of the cone;\ng = basal area;\nl = length.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.ModelEquation","page":"Reference","title":"ForestMensuration.ModelEquation","text":"struct ModelEquation\n\nDefine ModelEquation struct to store the regression results\n\nFields\n\noutput::String\nmodel::TableRegressionModel\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.Newton","page":"Reference","title":"ForestMensuration.Newton","text":"abstract type Newton <: CubingMethod\n\nNewton Method:   The Newton method involves measuring at 3 positions along each section (at the ends and in the middle    of the logs). Therefore, it is a more laborious method than the others, but the estimated volume will    be more accurate.\n\nv = v0 + Σi=1:n(vi) + vt\nvi = (gi + gm + gi+1)/2 * li\n\nWhere:\n\nv0 = volume of the stump;\nvi = volume of intermediate sections;\nvt = volume of the cone;\ng = basal area;\ngm = basal area at the midpoint of the section;\nl = length.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.SiteAnalysis","page":"Reference","title":"ForestMensuration.SiteAnalysis","text":"struct SiteAnalysis\n\nDefine SiteAnalysis struct to store the analysis results\n\nFields\n\nsite_table::DataFrame\nsite_plot::Plots.Plot\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.Smalian","page":"Reference","title":"ForestMensuration.Smalian","text":"abstract type Smalian <: CubingMethod\n\nSmalian Method:   The Smalian method measures diameters or circumferences at the ends of each section and calculates    the total volume by:\n\nVt = v0 + Σi=1:n(vi) + vt\nv0 = g0 * l0\nvi = (gi + gi+1)/2 * li\nvt = (1/3) * gn * ln\n\nWhere:\n\nv0 = volume of the stump;\nvi = volume of intermediate sections;\nvt = volume of the cone;\ng = basal area;\nl = length.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ForestMensuration.artificial_form_factor-Tuple{Real, Real, Real}","page":"Reference","title":"ForestMensuration.artificial_form_factor","text":"artificial_form_factor(vt::Real, ht::Real, dbh::Real)\n\nArtificial Form Factor (aff): For the calculation of the artificial form factor, the volume of the reference cylinder will have a diameter equal to the tree's DBH.\n\naff = Rigorous Vol / Cylinder Vol 1.3\n\nWhere:\n\nRigorous Vol = total volume determined by one of the methods: Smalian, Huber, or Newton;\nCylinder Vol 1.3 = volume of a cylinder with height and diameter equal to the total height and DBH of the tree.\n\nArguments\n\nvt::Real: The total volume of the tree.\nht::Real: The total height of the tree.\ndbh::Real: The diameter at breast height of the tree.\n\nReturns\n\nFloat64: The artificial form factor.\n\nExample\n\njulia> vt = 0.3378;\n\njulia> ht = 18.5;\n\njulia> dbh = 22.7;\n\njulia> artificial_form_factor(vt, ht, dbh)\n0.451176344374475\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.bark_factor-Tuple{Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.bark_factor","text":"bark_factor(d::Vector{<:Real}, e::Vector{<:Real})\n\nCalculates the bark factor, used to estimate the volume without bark.\n\nThe bark factor is used to estimate the volume without bark by considering the ratio of bark thickness  to total diameter.\n\nArguments\n\nd::Vector{<:Real}: Vector of diameters.\ne::Vector{<:Real}: Vector of bark thicknesses in millimeters.\n\nReturns\n\nFloat64: The bark factor, which represents the proportion of the diameter without bark.\n\nExample\n\njulia> d_values = [30.0, 22.5, 20.2, 15.4, 13.2, 10.9];\njulia> e_values = [1.2, 1.1, 0.85, 0.66, 0.48, 0.0];\njulia> bark_factor(d_values, e_values)\n0.961764705882353\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.basal_area-Tuple{Real}","page":"Reference","title":"ForestMensuration.basal_area","text":"basal_area(d::Real)\n\nCalculates the basal area (g) of a tree given its diameter in centimeters.\n\nDescription\n\nThis function computes the basal area of a tree, which is the cross-sectional area of the tree trunk at breast height (usually measured at 1.3 meters above ground). Basal area is a critical parameter in forest mensuration, used for estimating stand density, timber volume, and assessing competition among trees in a forest stand.\n\nArguments\n\nd::Real: The diameter at breast height (DBH) of the tree in centimeters. The diameter must be a positive value.\n\nReturns\n\nFloat64: The basal area of the tree in square meters.\n\nExample\n\n# Calculate the basal area for a tree with a diameter of 30 cm\njulia> basal_area(30.0)\n0.07068583470577035\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.bole_volume-Tuple{Type{<:ForestMensuration.CubingMethod}, Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.bole_volume","text":"bole_volume(method::Type{<:CubingMethod}, h::Vector{<:Real}, d::Vector{<:Real})\n\nCalculate tree bole volume cubic meters using Smalian, Newton, or Huber methods. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\n\nReturns\n\nFloat64: The volume of the bole in cubic meters.\n\nExample\n\njulia> d_values = [9.0, 7.0, 5.8, 5.1, 3.8, 1.9, 0.0];\n\njulia> h_values = [0.3, 1.3, 3.3, 5.3, 7.3, 9.3, 10.8];\n\njulia> bole_volume(Smalian, h_values, d_values)\n0.021087744337680632\n\njulia> bole_volume(Huber, h_values, d_values)\n0.020708986073382216\n\njulia> bole_volume(Newton, h_values, d_values)\n0.015548265641391484\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.cone_volume-Tuple{Real, Real}","page":"Reference","title":"ForestMensuration.cone_volume","text":"cone_volume(h::Real, d::Real)\n\nCalculates the volume of a cone, used to estimate the final portion (vn) of the tree, typically  considered to have a conical shape.\n\nArguments\n\nh::Real: The height of the cone in meters.\nd::Real: The diameter of the cone in centimeters.\n\nReturns\n\nFloat64: The volume of the cone in cubic meters.\n\nExample\n\njulia> cone_volume(18.5, 30.0)\n0.4358959806855838\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.criteria_selection-Tuple{Vector{<:TableRegressionModel}, Vararg{Symbol}}","page":"Reference","title":"ForestMensuration.criteria_selection","text":"criteria_selection(model::Vector{<:TableRegressionModel}, criteria::Symbol...)\n\nThe criteria_selection function evaluates and ranks a vector of regression models based on specified    criteria, returning the best model according to the combined ranking.\n\nParameters:\n\nmodel::Vector{<:TableRegressionModel}:  A vector of linear regression models to be evaluated and compared.\ncriteria::Symbol...:  A variable number of symbols representing the evaluation criteria to include. Possible values include:\n:adjr2: Adjusted R², a measure of the model's explanatory power, adjusted for the number of predictors.\n:syx: Standard error of the estimate as a percentage of the mean of y.\n:rmse: Root Mean Squared Error, indicating the average magnitude of residuals.\n:mae: Mean Absolute Error, another accuracy measure based on average absolute residuals.\n:aic: Akaike Information Criterion, balancing goodness of fit with model complexity.\n:significance: Evaluates whether model coefficients are statistically significant.\n:normality: Assesses the normality of residuals, an assumption in linear regression.\n:homoscedasticity: Checks for constant variance in residuals, another key regression assumption.\nIf no criteria are specified, the function will use all available criteria by default.\n\nReturns:\n\nTableRegressionModel:  The best model based on the combined ranking of the specified criteria.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.criteria_table-Tuple{Vector{<:TableRegressionModel}, Vararg{Symbol}}","page":"Reference","title":"ForestMensuration.criteria_table","text":"criteria_table(model::Vector{<:TableRegressionModel}, criteria::Symbol...; best::Union{Bool,Int}=10)\n\nThe criteria_table function evaluates and ranks multiple regression models based on specified criteria.    It generates a comprehensive table of performance metrics for each model, calculates ranks for these      metrics, and combines them into a final score. The function allows for flexible selection of      evaluation criteria and can return either all models or only the top models based on the combined ranking.\n\nParameters:\n\nmodel:  The regression model(s) to be evaluated and compared. This parameter can accept:\nSingle Linear Regression Model (TableRegressionModel): Evaluates a single linear regression model.\nVector of Linear Regression Models (Vector{<:TableRegressionModel}): Evaluates and compares multiple linear regression models.\ncriteria::Symbol...:  A variable number of symbols representing the evaluation criteria to include. Possible values include:\n:adjr2: Adjusted R², a measure of the model's explanatory power, adjusted for the number of predictors.\n:syx: Standard error of the estimate (Syx) expressed as a percentage of the mean of the dependent \nvariable (y), indicating the precision of the model's predictions.\n:rmse: Root Mean Squared Error, indicating the average magnitude of residuals.\n:mae: Mean Absolute Error, another accuracy measure based on average absolute residuals.\n:aic: Akaike Information Criterion, balancing goodness of fit with model complexity.\n:normality: Assesses the normality of residuals using the Kolmogorov-Smirnov test, ensuring that \nresiduals follow a normal distribution.\n:significance: Evaluates whether model coefficients are statistically significant.\nIf no criteria are specified, the function will use all available criteria by default.\nbest::Union{Bool, Int}=10:  Specifies the number of top models to return based on the combined ranking.\nfalse: Returns the full table with all models ranked.\nInteger value: If less than the total number of models, returns only the top best models.\n\nReturns:\n\nDataFrame:    A sorted table with the evaluated models and their respective metrics. Includes a combined rank    based on the selected criteria.\n\nExamples:\n\nSingle Model:  criteria_table(model, :adjr2, :rmse)\nVector of Models: criteria_table([model1, model2], :aic, :mae)\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.cubage","page":"Reference","title":"ForestMensuration.cubage","text":"cubage(method::Type{<:CubingMethod}, tree::Symbol, h::Symbol, d::Symbol, \ndata::AbstractDataFrame, d_limit::Union{Real,Nothing}=nothing; dbh::Float64=1.3)\n\nCalculate tree cubage using grouped data from a DataFrame. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\ntree::Symbol: The symbol representing the tree identifier.\nh::Symbol: The symbol representing the heights in the DataFrame.\nd::Symbol: The symbol representing the diameters in the DataFrame.\ndata::AbstractDataFrame: The DataFrame containing the tree data.\nd_limit::Union{Float64, Nothing}: Comercial diameter limit to be used in calculations (optional).\ndbh::Float64: Diameter at breast height (default is 1.3 meters).\n\nReturns\n\nDataFrame: A DataFrame with the calculated volumes and form factors for each tree.\n\nExample\n\n\n\n\n\n\n\n","category":"function"},{"location":"reference/#ForestMensuration.cubage-2","page":"Reference","title":"ForestMensuration.cubage","text":"cubage(method::Type{<:CubingMethod}, h::Vector{<:Real}, d::Vector{<:Real}, e::Vector{<:Real}, \nd_limit::Union{Real,Nothing}=nothing; dbh::Float64=1.3)\n\nCalculate tree cubage including bark factor. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\ne::Vector{<:Real}: Vector of bark thicknesses.\nd_limit::Union{Float64, Nothing}: Comercial diameter limit to be used in calculations (optional).\ndbh::Float64: Diameter at breast height (default is 1.3 meters).\n\nReturns\n\nDataFrame: A DataFrame with the calculated volumes, form factors, and bark-adjusted volumes.\n\nExample\n\n\n\n\n\n\n\n","category":"function"},{"location":"reference/#ForestMensuration.cubage-3","page":"Reference","title":"ForestMensuration.cubage","text":"cubage(method::Type{<:CubingMethod}, h::Vector{<:Real}, d::Vector{<:Real}, \nd_limit::Union{Real,Nothing}=nothing; dbh::Real=1.3)\n\nCalculate tree cubage using Smalian, Newton, or Huber methods. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.  Thus, the volume of the sections and the total volume are determined by summing the volume of the sections.  Determination can be carried out on felled trees or standing trees using equipment such as the Bitterlich relascope.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\nd_limit::Union{Float64, Nothing}: Comercial diameter limit to be used in calculations (optional).\ndbh::Float64: Diameter at breast height (default is 1.3 meters).\n\nReturns\n\nDataFrame: A DataFrame with the calculated volumes and form factors.\n\nExample\n\n\n\n\n\n\n\n","category":"function"},{"location":"reference/#ForestMensuration.cubage-4","page":"Reference","title":"ForestMensuration.cubage","text":"cubage(method::Type{<:CubingMethod}, tree::Symbol, h::Symbol, d::Symbol, e::Symbol, \ndata::AbstractDataFrame, d_limit::Union{Real,Nothing}=nothing; dbh::Float64=1.3)\n\nCalculate tree cubage including bark factor using grouped data from a DataFrame. The methods involve dividing the tree trunk into n sections (logs).  In each section, diameters and lengths are measured at positions that vary according to the technique employed.\n\nArguments\n\nmethod::Type{<:CubingMethod}: The method used for cubing (Smalian, Huber, or Newton).\ntree::Symbol: The symbol representing the tree identifier.\nh::Symbol: The symbol representing the heights in the DataFrame.\nd::Symbol: The symbol representing the diameters in the DataFrame.\ne::Symbol: The symbol representing the bark thicknesses in the DataFrame.\ndata::AbstractDataFrame: The DataFrame containing the tree data.\nd_limit::Union{Float64, Nothing}: Comercial diameter limit to be used in calculations (optional).\ndbh::Float64: Diameter at breast height (default is 1.3 meters).\n\nReturns\n\nDataFrame: A DataFrame with the calculated volumes, form factors, and bark-adjusted volumes for each tree.\n\nExample\n\n\n\n\n\n\n\n","category":"function"},{"location":"reference/#ForestMensuration.cylinder_volume-Tuple{Real, Real}","page":"Reference","title":"ForestMensuration.cylinder_volume","text":"cylinder_volume(h::Real, d::Real)\n\nCalculates the volume of a cylinder, used to estimate the volume (v0) of the tree stump remaining  after clear-cutting.\n\nArguments\n\nh::Real: The height of the cylinder in meters.\nd::Real: The diameter of the cylinder in centimeters.\n\nReturns\n\nFloat64: The volume of the cylinder in cubic meters.\n\nExample\n\njulia> cylinder_volume(18.5, 30.0)\n1.3076879420567515\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.dendrometric_averages-Tuple{Symbol, Symbol, DataFrames.AbstractDataFrame}","page":"Reference","title":"ForestMensuration.dendrometric_averages","text":"dendrometric_averages(p::Symbol, d::Symbol, data::AbstractDataFrame; area::Real=1.0)\n\nCalculates various dendrometric averages for each group in a dataset, grouping by a specified column,    and using the diameters specified in another column.\n\nDescription\n\nThis function computes several dendrometric averages based on a specified diameter column in a DataFrame,    grouped by another specified column. These metrics are essential for forest inventory and management,    providing insights into the stand structure, volume estimation, and growth patterns for each group.\n\nArguments\n\np::Symbol: The symbol representing the column name in data used to group the data.\nd::Symbol: The symbol representing the column name in data that contains the diameters at breast \n\nheight (DBH) of the trees in centimeters. All diameters must be positive values.\n\ndata::AbstractDataFrame: The DataFrame containing the dataset with at least the columns specified by \n\np and d.\n\narea::Real=1.0: The area in hectares over which the diameters were measured. Default is 1.0 hectare.\n\nReturns\n\nDataFrame: A DataFrame containing the calculated dendrometric averages for each group defined by p.\n\nExample\n\njulia> using DataFrames\n\n# Sample data\njulia> data = DataFrame(\n  species = [\"Oak\", \"Oak\", \"Oak\", \"Pine\", \"Pine\", \"Pine\"],\n  diameter = [10.5, 12.0, 13.5, 15.0, 16.5, 18.0]\n);\n\n# Calculate dendrometric averages grouped by species\njulia> dendrometric_averages(:species, :diameter, data; area=0.05)\n2×8 DataFrame\n Row │ species  d₋       d̅        dg       dw       dz       d₁₀₀     d₊\n     │ String   Float64  Float64  Float64  Float64  Float64  Float64  Float64\n─────┼────────────────────────────────────────────────────────────────────────\n   1 │ Oak         10.5     12.0  12.0623     12.3     12.0      NaN     13.5\n   2 │ Pine        15.0     16.5  16.5454     16.8     16.5      NaN     18.0\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.dendrometric_averages-Tuple{TableRegressionModel}","page":"Reference","title":"ForestMensuration.dendrometric_averages","text":"dendrometric_averages(model::TableRegressionModel; area::Real=1.0)\n\nCalculates various dendrometric averages of a forest stand and estimates the corresponding heights for    each diameter using a regression model.\n\nDescription\n\nThis function computes several dendrometric averages based on a regression model and estimates the heights    associated with each calculated diameter using the provided regression model. These metrics are essential     for forest inventory and management, providing insights into the stand structure, volume estimation,        and growth patterns.\n\nArguments\n\nmodel::TableRegressionModel: A regression model used to predict heights from diameters. The model \n\nshould be trained with diameters as predictors and heights as the response variable.\n\narea::Real=1.0: The area in hectares over which the diameters were measured. Default is 1.0 hectare.\n\nReturns\n\nDataFrame: A DataFrame containing the calculated dendrometric averages and the estimated heights. \n\nHeights are estimated by applying the regression model to each calculated diameter.\n\nh₋: Estimated height corresponding to d₋.\nh̄: Estimated height corresponding to d̄.\nhg: Estimated height corresponding to dg.\nhw: Estimated height corresponding to dw,.\nhz: Estimated height corresponding to dz.\nd₁₀₀: Estimated height corresponding to d₁₀₀.\nh₊: Estimated height corresponding to d₊.\n\nExample\n\njulia> using DataFrames\n\n# Assume we have a trained regression model `height_model` that predicts height from diameter\n# Sample data for the regression model\njulia> heights = [8.0, 9.5, 11.0, 12.5, 14.0, 15.5, 17.0, 18.5, 20.0, 21.5];\njulia> diameters = [10.5, 12.0, 13.5, 15.0, 16.5, 18.0, 19.5, 21.0, 22.5, 24.0];\njulia> data = DataFrame(h = heights, d = diameters);\n\n# Fit a linear regression model\njulia> height_models = regression(:h, :d, data);\njulia> best_model = criteria_selection(height_models);\n\n# Calculate dendrometric averages and estimate heights\njulia> dendrometric_averages(best_model; area=0.05)\n1×14 DataFrame\n Row │ d₋       d̅        dg       dw       dz       d₁₀₀     d₊       h₋       h̅        hg       hw       hz       h₊       h₁₀₀\n     │ Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64\n─────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 12.7085    17.25  17.7799     18.6  17.2663     21.0  21.7915  10.2085    14.75  15.2799     16.1  14.7663     18.5  19.2915\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.dendrometric_averages-Tuple{Vector}","page":"Reference","title":"ForestMensuration.dendrometric_averages","text":"dendrometric_averages(d::Vector; area::Real=1.0)\n\nCalculates various dendrometric averages of a forest stand, including mean diameter, quadratic mean  diameter, Hohenadl's diameters, Weise's diameter, diameter of the tree with central basal area, and  the mean diameter of the 100 largest trees per hectare.\n\nDescription\n\nThis function computes several dendrometric averages based on a vector of tree diameters. These metrics    are essential for forest inventory and management, providing insights into the stand structure, volume      estimation, and growth patterns.\n\nArguments\n\nd::Vector{<:Real}: A vector of diameters at breast height (DBH) of the trees in centimeters. All \n\ndiameters must be positive values.\n\narea::Real=1.0: The area in hectares over which the diameters were measured. Default is 1.0 hectare.\n\nReturns\n\nDataFrame: A DataFrame containing the calculated dendrometric averages:\nd₋: Lower Hohenadl's diameter, calculated as (d̄ - s), where d̄ is the mean diameter and s is the \nstandard deviation. Approximately 16% of the trees have diameters below d₋. This metric represents  one standard deviation below the mean diameter and is useful for understanding the variability and    distribution of diameters within the stand.\nd̄: Mean diameter, the arithmetic mean of the diameters. It is a basic measure of central tendency \nbut can be influenced by thinning practices. The mean diameter is a fundamental measure but can be  significantly affected by the removal of smaller or larger trees during thinning operations.\ndg: Quadratic mean diameter, calculated using the mean basal area as dg = sqrt((40000 * mean(g)) / π), \nwhere g is the basal area of each tree. It closely approximates the diameter of the tree with mean  basal area and is less affected by extreme values or thinning. This metric provides a better estimate  for volume calculations and is less sensitive to variations in the data.\ndw: Weise's diameter, the diameter at which 60% of the trees have smaller diameters (the 60th \npercentile). It approximates the diameter of the tree with mean volume. Weise's diameter is considered  a good approximation of the diameter of the tree with mean volume and is less influenced by thinning  practices.\ndz: Diameter of the tree with central basal area, calculated from the median basal area as `dz = \nsqrt((40000 * median(g)) / π)`. It represents the diameter that divides the stand's total basal area  into two equal parts, effectively splitting the cumulative basal area. This metric is less influenced  by the removal of smaller trees and provides insight into the stand's structure.\nd₁₀₀: Mean diameter of the 100 largest trees per hectare. If there are fewer than 100 trees per \nhectare, it returns NaN. This metric provides insight into the size of the largest trees in the stand,  which can be important for management objectives like timber production.\nd₊: Upper Hohenadl's diameter, calculated as (d̄ + s). Approximately 84% of the trees have diameters\nbelow d₊. This metric represents one standard deviation above the mean diameter and is useful for   understanding the variability and distribution of diameters within the stand.\n\nExample\n\njulia> using DataFrames\n\n# Sample diameters in centimeters\njulia> diameters = [10.5, 12.0, 13.5, 15.0, 16.5, 18.0, 19.5, 21.0, 22.5, 24.0];\n\n# Calculate dendrometric averages\njulia> dendrometric_averages(diameters, area=0.05)\n1×7 DataFrame\n Row │ d₋       d̅        dg       dw       dz       d₁₀₀     d₊\n     │ Float64  Float64  Float64  Float64  Float64  Float64  Float64\n─────┼───────────────────────────────────────────────────────────────\n   1 │ 12.7085    17.25  17.7799     18.6  17.2663     21.0  21.7915\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.diametric_table-Tuple{Symbol, Symbol, DataFrames.AbstractDataFrame}","page":"Reference","title":"ForestMensuration.diametric_table","text":"diametric_table(g::Symbol, x::Symbol, data::AbstractDataFrame; plot_area::Real=1.0)\n\nCreates a diametric table for grouped data in a DataFrame.\n\nArguments\n\ng::S: The symbol representing the grouping variable.\nx::S: The symbol representing the values variable.\ndata::AbstractDataFrame: The DataFrame containing the data.\nplot_area::Real=1.0: The plot area in hectares (default is 1.0).\n\nReturns\n\nDataFrame: A DataFrame containing the diametric table for each group.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.diametric_table-Tuple{Symbol, Symbol, Real, DataFrames.AbstractDataFrame}","page":"Reference","title":"ForestMensuration.diametric_table","text":"diametric_table(g::Symbol, x::Symbol, hi::Real, data::AbstractDataFrame; plot_area::Real=1.0)\n\nCreates a diametric table for grouped data in a DataFrame with a specified class width.\n\nArguments\n\ng::S: The symbol representing the grouping variable.\nx::S: The symbol representing the values variable.\nhi::Real: The class width.\ndata::AbstractDataFrame: The DataFrame containing the data.\nplot_area::Real=1.0: The plot area in hectares (default is 1.0).\n\nReturns\n\nDataFrame: A DataFrame containing the diametric table for each group.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.diametric_table-Tuple{Vector{<:Real}, Real}","page":"Reference","title":"ForestMensuration.diametric_table","text":"diametric_table(x::Vector{<:Real}, hi::Real; plot_area::Real=1.0)\n\nCreates a diametric table for a vector of values given a class width and plot area.\n\nArguments\n\nx::Vector{<:Real}: The vector of values.\nhi::Real: The class width.\nplot_area::Real=1.0: The plot area in hectares (default is 1.0).\n\nReturns\n\nDataFrame: A DataFrame containing the diametric table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.diametric_table-Tuple{Vector{<:Real}}","page":"Reference","title":"ForestMensuration.diametric_table","text":"diametric_table(x::Vector{<:Real}; plot_area::Real=1.0)\n\nCreates a diametric table for a vector of values.\n\nArguments\n\nx::Vector{<:Real}: The vector of values.\nplot_area::Real=1.0: The plot area in hectares (default is 1.0).\n\nReturns\n\nDataFrame: A DataFrame containing the diametric table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.frequency_table-Tuple{Symbol, Symbol, DataFrames.AbstractDataFrame}","page":"Reference","title":"ForestMensuration.frequency_table","text":"frequency_table(g::Symbol, x::Symbol, data::AbstractDataFrame)\n\nCreates a frequency table for grouped data in a DataFrame.\n\nArguments\n\ng::S: The symbol representing the grouping variable.\nx::S: The symbol representing the values variable.\ndata::AbstractDataFrame: The DataFrame containing the data.\n\nReturns\n\nDataFrame: A DataFrame containing the frequency table for each group.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.frequency_table-Tuple{Symbol, Symbol, Real, DataFrames.AbstractDataFrame}","page":"Reference","title":"ForestMensuration.frequency_table","text":"frequency_table(g::Symbol, x::Symbol, hi::Real, data::AbstractDataFrame)\n\nCreates a frequency table for grouped data in a DataFrame with a specified class width.\n\nArguments\n\ng::S: The symbol representing the grouping variable.\nx::S: The symbol representing the values variable.\nhi::Real: The class width.\ndata::AbstractDataFrame: The DataFrame containing the data.\n\nReturns\n\nDataFrame: A DataFrame containing the frequency table for each group.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.frequency_table-Tuple{Vector{<:Real}, Real}","page":"Reference","title":"ForestMensuration.frequency_table","text":"frequency_table(x::Vector{<:Real}, hi::Real)\n\nCreates a frequency table for a vector of values given a class width.\n\nArguments\n\nx::Vector{<:Real}: The vector of values.\nhi::Real: The class width.\n\nReturns\n\nDataFrame: A DataFrame containing the frequency table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.frequency_table-Tuple{Vector{<:Real}}","page":"Reference","title":"ForestMensuration.frequency_table","text":"frequency_table(x::Vector{<:Real})\n\nCreates a frequency table for a vector of values.\n\nArguments\n\nx::Vector{<:Real}: The vector of values.\n\nReturns\n\nDataFrame: A DataFrame containing the frequency table.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.hdom_classification-Tuple{TableRegressionModel, DataFrames.AbstractDataFrame, Real, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.hdom_classification","text":"hdom_classification(model::TableRegressionModel, data_age::AbstractDataFrame, index_age::Real, site::Vector{<:Real})\n\nCalculate the dominant height given the site classification, fitted model, and index age.\n\nArguments\n\nmodel::StatsModels.TableRegressionModel: The fitted regression model.\ndata_age::AbstractDataFrame: The data frame containing the current age data.\nindex_age::Real: The index age for the calculation.\nsite::Vector{<:Real}: The site classification values.\n\nReturns\n\nhdom::Vector{Real}: The dominant height for each observation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.natural_form_factor-Tuple{Real, Real, Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.natural_form_factor","text":"natural_form_factor(vt::Real, ht::Real, h::Vector{<:Real}, d::Vector{<:Real})\n\nNatural Form Factor (nff): For the calculation of the natural form factor, the volume of the reference cylinder will have a  diameter equal to the diameter taken at 1/10 of the total height.\n\nf0.1h = Rigorous Vol / Cylinder Vol 0.1\n\nWhere:\n\nRigorous Vol = total volume determined by one of the methods: Smalian, Huber, or Newton;\nCylinder Vol 0.1 = volume of a cylinder with height equal to the total height of the tree and \n\ndiameter taken at 1/10 of the total height. Interpolate diameter at a given height using linear interpolation.\n\nArguments\n\nvt::Real: The total volume of the tree.\nht::Real: The total height of the tree.\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\n\nReturns\n\nFloat64: The natural form factor.\n\nExample\n\n\njulia> vt = 0.3378;\n\njulia> ht = 18.5;\n\njulia> d_values = [9.0, 7.0, 5.8, 5.1, 3.8, 1.9, 0.0];\n\njulia> h_values = [0.3, 1.3, 3.3, 5.3, 7.3, 9.3, 10.8];\n\njulia> natural_form_factor(vt, ht, h_values, d_values)\n8.951469588617691\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.plot_regression-Tuple{RegressionModel}","page":"Reference","title":"ForestMensuration.plot_regression","text":"plot_regression(model::RegressionModel)\n\nThe plot_regression function generates four essential diagnostic plots to analyze the performance    and validity of a linear regression model in Julia. These plots help in assessing the goodness-of-fit,    the distribution of residuals, and the assumptions underlying linear regression, such as homoscedasticity     and normality. The function is particularly useful for ensuring that the regression model meets the      assumptions required for reliable inference and prediction.\n\nParameters:\n\nmodel::TableRegressionModel:  The fitted linear regression model. This model is analyzed to generate the diagnostic plots.\n\nFunctionality:\n\nObserved vs Fitted Values:   This scatter plot compares the observed data points with the values predicted by the model. It is   useful for visually assessing the accuracy of the model's predictions.\nResiduals vs Fitted Values:   This plot shows the residuals (errors) against the fitted values. Ideally, residuals should be randomly   scattered around zero without any apparent pattern, indicating a good model fit.\nHistogram of Residuals:   This histogram displays the distribution of residuals. A normal distribution of residuals is one of the   key assumptions of linear regression, and this plot helps verify it.\nNormal Q-Q Plot:   This plot compares the quantiles of the residuals to the quantiles of a normal distribution. It is used   to check the assumption of normality in the residuals.\n\nThe function automatically applies color schemes and adjusts plot aesthetics to enhance the clarity of the    visualizations. The plots are combined into a single layout for easy comparison and interpretation.     Additionally, the function adjusts dynamically based on the number of groups in the data, making it     versatile for different datasets and models.\n\nExamples:\n\n# Generate diagnostic plots for a fitted regression model\nplots = plot_regression(model)\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.prediction!-Tuple{TableRegressionModel, DataFrames.AbstractDataFrame}","page":"Reference","title":"ForestMensuration.prediction!","text":"prediction!(model::TableRegressionModel, data::AbstractDataFrame)\n\nThe prediction! function computes predictions from a regression model and adds these predictions    directly to the provided data frame as new columns. It is particularly useful in forest inventory    data where not all trees have been measured for a specific variable, allowing the model to estimate      these missing values.\n\nParameters:\n\nmodel: A single linear regression model.\ndata:    The data frame (AbstractDataFrame) containing the input data. The function will add new columns    to this data frame.\n\nFunctionality:\n\nPredicted Values Column (_predict): The function calculates the predicted values for the dependent variable (y) based on the input model    and appends these values as a new column in the data frame with the suffix _predict.\nReal or Estimated Values Column (_real): The function also creates a _real column where the actual measured values of y are preserved if    they exist. For observations where y is missing (or set to 0.0), the predicted value from the    model is used instead.\nThis setup is ideal for forest inventory datasets where certain tree attributes (like height or volume)    might not be measured for every tree, and predictions need to be filled in for these gaps.\n\nExamples:\n\n# Apply predictions to a data frame\nprediction!(model, forest_inventory_data)\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.prediction-Tuple{TableRegressionModel}","page":"Reference","title":"ForestMensuration.prediction","text":"prediction(model::TableRegressionModel)\nprediction(model::TableRegressionModel, data::AbstractDataFrame)\nprediction(model::TableRegressionModel, data::DataFrameRow)\n\nThe prediction function family provides a versatile way to generate predictions from regression models,    supporting both individual and grouped models. It handles predictions on the original scale even if the    dependent variable (y) has been transformed (e.g., log(y)), ensuring that any transformations     applied during model fitting are correctly reversed, including the application of Meyer correction     factors for logarithmic transformations.\n\nParameters:\n\nmodel: A single linear regression model.\ndata:  The input data for which predictions are needed. This parameter can be:\nAbstractDataFrame: A data frame containing the input data.\nDataFrameRow: A single row of data from a data frame.\n\nReturns:\n\nVector{<:Real} or Vector{Union{Missing, <:Real}}: The predicted values on the original scale of y, adjusted for any transformations and corrected using  the Meyer factor for logarithmic transformations.\n\nKey Features:\n\nHandles Transformed Dependent Variables: If the dependent variable was transformed (e.g., using log\n\ntransformations), the function correctly inverts the transformation to return predictions on the original   scale.\n\nApplies Meyer Correction Factor: For models using logarithmic transformations, the Meyer correction\n\nfactor is applied to the predictions to correct for the bias introduced by the log transformation.\n\nSupports Grouped Models: When using grouped models, the function automatically selects and applies\n\nthe correct model for each data point based on its group membership.\n\nExamples:\n\nSingle Model Prediction:\ny_pred = prediction(model, data)\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.quotient_form-Tuple{Real, Real, Vector{<:Real}, Vector{<:Real}}","page":"Reference","title":"ForestMensuration.quotient_form","text":"quotient_form(ht::Real, dbh::Real, h::Vector{<:Real}, d::Vector{<:Real})\n\nForm Quotient (qf): The natural decrease in diameter along the trunk defines the so-called form quotient, which is a ratio  between diameters. An example of a form quotient is the Schiffel form quotient, given by:\n\nQ = D(1/2H) / DBH\n\nWhere:\n\nQ < 1\nD(1/2H) = diameter measured at half the total height of the tree.\n\nSimilar to the form factor, the volume of a tree, with or without bark, can be obtained by multiplying  the volume of a cylinder by the average form quotient, suitable for the species and the desired volume  to be estimated.\n\nArguments\n\nht::Real: The total height of the tree.\ndbh::Real: The diameter at breast height of the tree.\nh::Vector{<:Real}: Vector of heights.\nd::Vector{<:Real}: Vector of diameters.\n\nReturns\n\nFloat64: The form quotient.\n\nExample\n\n\njulia> ht = 18.5;\n\njulia> dbh = 22.7;\n\njulia> d_values = [9.0, 7.0, 5.8, 5.1, 3.8, 1.9, 0.0];\n\njulia> h_values = [0.3, 1.3, 3.3, 5.3, 7.3, 9.3, 10.8];\n\njulia> quotient_form(ht, dbh, h_values, d_values)\n0.08579295154185025\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.regression-Tuple{Symbol, Symbol, DataFrames.AbstractDataFrame, Vararg{Symbol}}","page":"Reference","title":"ForestMensuration.regression","text":"regression(y::Symbol, x::Symbol, data::AbstractDataFrame, q::Symbol...)\n\nThe regression function in Julia automatically generates and evaluates multiple simple regression models based on the provided data, including both continuous and categorical variables. This function significantly expands the traditional analysis typically applied in forest biometrics, such as the relationship between tree height and diameter at breast height (DBH), by automatically generating and evaluating 240 unique combinations of dependent and independent variable transformations.\n\nParameters:\n\ny::Symbol:    The dependent variable (response variable) for the regression model. Typically represents a continuous measure such as tree height or volume in forestry studies.\nx::Symbol:    The independent variable (predictor variable) used to explain variations in the dependent variable. Often represents a measure like diameter at breast height (DBH) in forestry.\ndata::AbstractDataFrame:    The dataset containing the variables for regression. The data frame must include all variables specified in y, x, and q, and it will automatically remove any rows with missing values before performing the regression.\nq::Symbol... (optional):    A variable number of symbols representing additional categorical variables (qualitative factors) to include in the regression model. These are treated as factors and can influence the model differently based on their levels.\n\nFunctionality:\n\nDependent Variable Transformations: The function generates multiple transformations of the dependent variable (y), including logarithmic and inverse functions. Specifically, the following transformations are created:\nlog(y): Logarithm of y.\nlog_minus(y): Logarithm of y - 1.3.\nlog1p(y): Logarithm of 1 + y.\n1/y: Inverse of y.\n1/(y - 1.3): Inverse of y - 1.3.\n1/√y: Inverse of the square root of y.\n1/√(y - 1.3): Inverse of the square root of y - 1.3.\nx/√y: Ratio of x to the square root of y.\nx/√(y - 1.3): Ratio of x to the square root of y - 1.3.\nx²/y: Square of x divided by y.\nx²/(y - 1.3): Square of x divided by y - 1.3.\nIndependent Variable Transformations: Similarly, multiple transformations of the independent variable (x) are created:\nx²: Square of x.\nlog(x): Logarithm of x.\nlog(x)²: Square of the logarithm of x.\n1/x: Inverse of x.\n1/x²: Inverse of Square of x.\nCombined Model Formulations: The function creates a total of 240 combinations of these transformations by pairing the various forms of y and x. For example, the function considers combinations such as:\ny ~ x + x²\ny ~ x + log(x)\nlog(y) ~ log(x) + 1/x\n(x / y) ~ x + log(x)²\nAnd many more.\n\nThis comprehensive set of models extends beyond the typical scope of forest biometrics, where usually only a few standard models (around five) are tested. By automatically exploring a wide array of potential relationships, this method allows for a more thorough investigation of the possible functional forms that describe the relationship between tree height and DBH or other relevant variables.\n\nStandard Regression: The function performs a regression analysis by automatically generating a wide array of possible models. It creates multiple transformations of the dependent and independent variables, combining them into various model forms. The results can be evaluated, and the best models can be selected based on criteria such as adjusted R², RMSE, AIC, and more, using the criteria_table function.\nQualitative Variables: The function allows the inclusion of categorical variables (q) in the regression model. These variables are automatically treated as factors and can be used to capture variations in the dependent variable that are related to these qualitative factors.\n\nApplications:\n\nThis method is ideal for forestry researchers and practitioners who want to ensure they are not overlooking any potentially significant models by expanding their analysis to include a broader range of possible relationships between the variables.\n\nExamples:\n\n# Perform standard regression without grouping\nmodels = regression(:height, :diameter, data)\n\n# View the top models based on a specific criteria\nbest_models = criteria_table(models, :adjr2, :rmse)\n\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.simple_casual_sampling-Tuple{Vector{<:Real}, Real, Real}","page":"Reference","title":"ForestMensuration.simple_casual_sampling","text":"simple_casual_sampling(volume::Vector{<:Real}, plot_area::Real, total_area::Real; \ne::Real=10, α::Real=0.95, lg::Symbol=:pt)\n\nPerforms simple random sampling for forest inventory with specified plot area and total area.\n\nArguments\n\nvolume::Vector{<:Real}: Volume measurements.\nplot_area::Real: Area of each plot.\ntotal_area::Real: Total area.\ne::Real=10: Desired error margin (default is 10%).\nα::Real=0.95: Confidence level (default is 95%).\nlg::Symbol=:pt: Language for the report (default is Portuguese).\n\nReturns\n\nDataFrame: Inventory report.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.simple_casual_sampling-Tuple{Vector{<:Real}, Real}","page":"Reference","title":"ForestMensuration.simple_casual_sampling","text":"simplecasualsampling(volume::Vector{<:Real}, total_area::Real;    e::Real=10, α::Real=0.95, lg::Symbol=:pt)\n\nPerforms simple random sampling for forest inventory with total area.\n\nArguments\n\nvolume::Vector{<:Real}: Volume measurements.\ntotal_area::Real: Total area.\ne::Real=10: Desired error margin (default is 10%).\nα::Real=0.95: Confidence level (default is 95%).\nlg::Symbol=:pt: Language for the report (\":pt\" for Portuguese - default, \":en\" for English).\n\nReturns\n\nDataFrame: Inventory report.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.site_classification-Tuple{TableRegressionModel, DataFrames.AbstractDataFrame, Real}","page":"Reference","title":"ForestMensuration.site_classification","text":"site_classification(model::TableRegressionModel, data_age::AbstractDataFrame, index_age::Real)\n\nCalculate the site classification given the fitted model and index age.\n\nArguments\n\nmodel::StatsModels.TableRegressionModel: The fitted regression model.\ndata_age::AbstractDataFrame: The data frame containing the current age data.\nindex_age::Real: The index age for site classification.\n\nReturns\n\nsite::Vector{Real}: The site classification for each observation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.site_classification-Tuple{TableRegressionModel, Real}","page":"Reference","title":"ForestMensuration.site_classification","text":"site_classification(model::TableRegressionModel, index_age::Real)\n\nCalculate the site classification given the fitted model and index age.\n\nArguments\n\nmodel: The fitted regression model.\nindex_age::Real: The index age for site classification.\n\nReturns\n\nsite_classification::Vector{Real}: The site classification for each observation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ForestMensuration.site_table-Tuple{TableRegressionModel, Real, Real}","page":"Reference","title":"ForestMensuration.site_table","text":"site_table(model::TableRegressionModel, index_age::Real)\nsite_table(model::TableRegressionModel, index_age::Real, hi::Real)\n\nCalculate the site table given a fitted model, index age, and height increment.\n\nArguments\n\nmodel::StatsModels.TableRegressionModel: The fitted regression model.\nindex_age::Real: The index age for site classification.\nhi::Real: The height increment for site classification.\n\nReturns\n\nSiteAnalysis: A struct containing site table and site plot.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"tutorial/#Getting-Started","page":"Tutorial","title":"Getting Started","text":"","category":"section"},{"location":"tutorial/#Computing-the-[cubage](@ref)","page":"Tutorial","title":"Computing the cubage","text":"","category":"section"},{"location":"tutorial/#Cubing-a-Simple-Tree","page":"Tutorial","title":"Cubing a Simple Tree","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Cubage for a single tree, with diameters measured in centimeters and heights in meters. The diameter at breast height (DBH) and total height (Ht) must be provided as part of the input values. The CubingMethods can be: Smalian, Newton and Huber.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ForestMensuration\n\nd = [9.0, 7.0, 5.8, 5.1, 3.8, 1.9, 0.0]\n\nh =  [0.3, 1.3, 3.3, 5.3, 7.3, 9.3, 10.8]\n\ncubage(Smalian, h, d)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"With the bark thickness value, it is possible to calculate the bark factor and total and commercial volumes without bark. Note: the provided thickness should be the 'single thickness' in millimeters, i.e., the actual value collected from the field. The function will convert it into 'double thickness'.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"\nbark = [0.9, 0.5, 0.3, 0.2, 0.2, 0.1, 0.0]\n\ncubage(Newton, h, d, bark)","category":"page"},{"location":"tutorial/#Cubing-Multiple-Trees","page":"Tutorial","title":"Cubing Multiple Trees","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We utilize the function cubage to calculate cubage for multiple trees. The function expects data in a dataframe format where each row represents a tree, and columns contain attributes such as height and diameter. The cubage function can be applied to each tree group using the specified height and diameter columns.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ForestMensuration # hide\nusing DataFrames\n\ndata = DataFrame(\n    tree = [148, 148, 148, 148, 148, 148, 148, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222],\n    h = [0.3, 1.3, 3.3, 5.3, 7.3, 9.3, 10.8, 0.3, 1.3, 3.3, 5.3, 7.3, 9.3, 11.3, 13.3, 15.3, 17.3, 19.5],\n    d = [9.0, 7.0, 5.8, 5.1, 3.8, 1.9, 0.0, 16.0, 12.0, 11.6, 10.1, 9.4, 8.2, 7.0, 6.0, 4.0, 2.0, 0.0],\n    bark = [0.9, 0.5, 0.3, 0.2, 0.2, 0.1, 0.0, 1.2, 0.5, 0.3, 0.3, 0.2, 0.2, 0.3, 0.0, 0.0, 0.0, 0.0]\n)\n\ncubage(Huber, :tree, :h, :d, data)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Additionally, bark thickness values can be provided to calculate bark factors and volumes without bark.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"cubage(Huber, :tree, :h, :d, :bark, data)","category":"page"},{"location":"tutorial/#Fitting-the-[regression](@ref)","page":"Tutorial","title":"Fitting the regression","text":"","category":"section"},{"location":"tutorial/#Adjusting-a-Hypsometric-Relationship","page":"Tutorial","title":"Adjusting a Hypsometric Relationship","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The regression function in ForestMensuration.jl is designed to explore multiple transformations and model combinations between two quantitative variables. In forestry, this function can be particularly useful for assessing relationships such as height (h) in function of diameter at breast height (dbh), as it automatically generates 240 unique combinations of transformations for both dependent and independent variables.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"By analyzing a wide range of transformations, including logarithmic, inverse, and square root forms, the regression function allows for a comprehensive assessment of potential relationships in your data, aiding in the selection of the best-fit model.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ForestMensuration\nusing DataFrames\n\n# Full dataset with 100 values, 3 plots\ndata = DataFrame(\n    h = [35.2, 34.5, 28.8, 28.5, 33.5, 29.5, 28.4, 30.4, 33.0, 31.0,\n         24.8, 36.9, 34.0, 28.2, 28.9, 31.5, 28.0, 29.5, 34.6, 29.6,\n    ],\n    dbh = [42.0, 25.0, 33.5, 21.3, 27.0, 24.0, 23.3, 39.0, 42.0, 42.5,\n           23.0, 46.0, 39.0, 34.0, 26.5, 41.0, 31.3, 30.5, 30.5, 28.5\n    ]\n)\n\n# Performing the regression analysis on the full dataset\n# Here, we analyze the relationship between height (h) and diameter (dbh)\nmodels = regression(:h, :dbh, data);\n# Alternative print of fitted models\nmodels_eq = ModelEquation.(models)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"#number of fitted regressions\nlength(models)","category":"page"},{"location":"tutorial/#Viewing-the-top-models-based-on-specific-criteria","page":"Tutorial","title":"Viewing the top models based on specific criteria","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Using all criteria and presenting the 10 best models\nbest_models = criteria_table(models)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Chossing as especific criteria and best 5, if best = false or 0 show all regressions from 'models'\nbest_models_v2 = criteria_table(models, :adjr2, :rmse, best=5)","category":"page"},{"location":"tutorial/#Regression-Selection-Criteria-[criteria_table](@ref)","page":"Tutorial","title":"Regression Selection Criteria criteria_table","text":"","category":"section"},{"location":"tutorial/#Site-Class","page":"Tutorial","title":"Site Class","text":"","category":"section"},{"location":"tutorial/#Frequency-and-Diametric-Tables","page":"Tutorial","title":"Frequency and Diametric Tables","text":"","category":"section"},{"location":"tutorial/#Inventory-Report","page":"Tutorial","title":"Inventory Report","text":"","category":"section"}]
}
